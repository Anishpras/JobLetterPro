// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model CoverLetter {
    id                             String               @id @default(cuid())
    jobDescription                 String?
    jobDescriptionGeneratedContent String?
    coverLetterhistory             CoverLetterHistory[]
    user                           User?                @relation(fields: [userId], references: [id])
    userId                         String?              @unique()
    createdAt                      DateTime             @default(now())
    updatedAt                      DateTime             @updatedAt
}

model CoverLetterHistory {
    id                     String                    @id @default(cuid())
    // tone                   CoverLetterGenerationEnum @default(CONVINCING)
    jobTitle               String?
    coverLetterHistoryData String?
    coverLetter            CoverLetter?              @relation(fields: [coverLetterId], references: [id])
    coverLetterId          String?
    createdAt              DateTime                  @default(now())
    updatedAt              DateTime                  @updatedAt
}

// enum CoverLetterGenerationEnum {
//     APPRECIATIVE
//     ASSERTIVE
//     AWESTRUCK
//     CANDID
//     CASUAL
//     CAUTIONARY
//     COMPASSIONATE
//     CONVINCING
//     CRITICAL
//     EARNEST
//     ENTHUSIASTIC
//     FORMAL
//     FUNNY
//     HUMBLE
//     HUMOROUS
//     INFORMATIVE
//     INSPIRATIONAL
//     JOYFUL
//     PASSIONATE
//     THOUGHTFUL
//     URGENT
//     WORRIED
// }

model Resume {
    id               String   @id @default(cuid())
    extractedData    Json?
    generatedContent String?
    user             User?    @relation(fields: [userId], references: [id])
    userId           String?  @unique()
    createdAt        DateTime @default(now())
    updatedAt        DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String        @id @default(cuid())
    name          String?
    email         String?       @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    CoverLetter   CoverLetter[]
    Resume        Resume[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
